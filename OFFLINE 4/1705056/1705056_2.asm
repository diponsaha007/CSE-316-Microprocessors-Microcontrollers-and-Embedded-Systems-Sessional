.MODEL SMALL


.STACK 100H


.DATA
	CR EQU 0DH
	LF EQU 0AH
	N DW ?
	I DW 0
.CODE

MAIN PROC
	;DATA SEGMENT INITIALIZATION
    MOV AX, @DATA
    MOV DS, AX
    
	CALL INPUT
	MOV N,AX
	
	;PRINT NEW LINE
	MOV AH, 2
	MOV DL , LF
	INT 21H
	MOV DL , CR
	INT 21H
	
	MOV I,0
LOOPING:
    MOV AX,N
    CMP I,AX
    JE DONE
	
	MOV AX,I
	PUSH AX
	CALL FIB
	CALL OUTPUT
	POP AX
	;PRINT SPACE
	MOV AH, 2
	MOV DL , 32
	INT 21H

    INC I
    JMP LOOPING

DONE:
    
    ;DOS EXIT
    MOV AH, 4CH
    INT 21H

MAIN ENDP
FIB PROC
	;OUTPUT IS IN AX
	
	PUSH BP
	MOV BP,SP
	MOV CX , [BP+4] ; GET N
	CMP CX,1
	JG RECURSIVE
	;NON RECURSIVE CASE
	;RETURN N
	MOV AX,CX
	JMP RETURN
	
RECURSIVE:
;COMPUTE FIB(N-1)
	DEC CX
	PUSH CX
	CALL FIB
	POP CX
	PUSH AX
;COMPUTE FIB (N-2)
	DEC CX
	PUSH CX
	CALL FIB
	POP CX
	POP BX
	ADD AX,BX ;FIB(N) = FIB(N-1) + FIB(N-2)
	
	
RETURN:
	POP BP
	RET


FIB ENDP

INPUT PROC
	;INPUT NUMBER IS IN AX
	;SAVE REGISTERS
	PUSH BX
	PUSH CX
	PUSH DX
	
	XOR BX,BX ;TOTAL = 0
	XOR CX,CX ;SIGN = 0
	

	
	MOV AH,1
	INT 21H
	
	CMP AL , '-' ;CHECK FOR NEGATIVE SIGN
	JNE TAKE ;NOT NEGATIVE
	MOV CX,1
	INT 21H
	
TAKE:
	;CHECK IF DONE
	;IF(AL >= '0' && AL <= '9') TOTAL = TOTAL * 10 + AL
	CMP AL ,'0'
	JNGE FINISH
	CMP AL,'9'
	JNLE FINISH
	AND AX,000FH
	PUSH AX
	MOV AX,10
	MUL BX
	POP BX
	ADD BX,AX
INVALID:
	MOV AH,1
	INT 21H
	JMP TAKE


FINISH:
	MOV AX,BX
	CMP CX,0
	JE LAST
	NEG AX
LAST:
	POP DX
	POP CX
	POP BX
	RET
INPUT ENDP

OUTPUT PROC
	;PRINTS THE NUMBER STORED IN AX
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	CMP AX,0
	JGE HERE
	;NEGATIVE NUMBER
	PUSH AX
	MOV AH, 2
	MOV DL, '-'
	INT 21H
	POP AX
	NEG AX
HERE:
	XOR CX,CX ; COUNTER = 0
	MOV BX , 10 ;DIVISOR = 10
	
	
LOOP_:
	CMP AX,0
	JE END_LOOP
	
	XOR DX,DX
	DIV BX ;REMINDER IS IN DX
	PUSH DX ; SAVING REMINDERS IN STACK
	INC CX
	JMP LOOP_
END_LOOP:
	CMP CX,0
	JNE PRINTER
	MOV AH,2
	MOV DL,'0'
	INT 21H
	JMP ENDER
PRINTER:
	MOV AH,2
	POP DX
	OR DL,30H
	INT 21H
	LOOP PRINTER
	
ENDER:
	POP DX
	POP CX
	POP BX
	POP AX
	RET
OUTPUT ENDP

END MAIN
